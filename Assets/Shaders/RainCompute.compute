// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//calculates the travel distance of the rain and resets it if it hits the lower Boundary

RWStructuredBuffer<float3> raindrops;
//RWStructuredBuffer<int> particleCount; //for spawining in compute
float rainSpeed;
float deltaTime;
float lowerBoundary;
float3 windDirection;
float3 spawnPoint;
float radius;

//int maxParticleCount; //for spawining in compute

float2 random2(float2 p) {
    return frac(sin(float2(dot(p,float2(127.1,311.7)),dot(p,float2(269.5,183.3))))*43758.5453);
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    raindrops[id.x] += deltaTime * rainSpeed * float3(0,-1,0) + deltaTime * windDirection; //calculates fall around wind direction and fall speed
	if(raindrops[id.x].y < lowerBoundary){
		float2 random = random2(float2(raindrops[id.x].y, deltaTime));
		raindrops[id.x] = spawnPoint + float3((random.x * radius) - radius, 0, (random.y * radius)  - radius); //spawns in a circle around the spawnPoint
	}
	/*if(particleCount[0] < maxParticleCount && (random2(float2(raindrops[id.x].y, deltaTime)).x < (0.5 - (float)( 1 / (maxParticleCount - particleCount[0] + 1))))){ //for spawning particles in the compute shader (for some reason more performance in the script)
		float2 random = random2(float2(raindrops[id.x].y, deltaTime));
		raindrops[id.x] = spawnPoint + float3(random.y * radius, 0, random.x * radius);
		particleCount[0] += 1;
	}*/
}
